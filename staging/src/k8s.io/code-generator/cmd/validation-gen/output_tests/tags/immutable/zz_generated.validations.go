//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package immutable

import (
	context "context"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Struct(ctx, op, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
	})
	return nil
}

func Validate_ImmutableType(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ImmutableType) (errs field.ErrorList) {
	// type ImmutableType
	errs = append(errs, validate.ImmutableByCompare(ctx, op, fldPath, obj, oldObj)...)

	return errs
}

func Validate_Struct(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.StringField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringField"), &obj.StringField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.StringField }), obj)...)

	// field Struct.StringPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringPtrField"), obj.StringPtrField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.StringPtrField }), obj)...)

	// field Struct.StructField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ComparableStruct, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("structField"), &obj.StructField, safe.Field(oldObj, func(oldObj *Struct) *ComparableStruct { return &oldObj.StructField }), obj)...)

	// field Struct.StructPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ComparableStruct, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("structPtrField"), obj.StructPtrField, safe.Field(oldObj, func(oldObj *Struct) *ComparableStruct { return oldObj.StructPtrField }), obj)...)

	// field Struct.NonComparableStructField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *NonComparableStruct, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("noncomparableStructField"), &obj.NonComparableStructField, safe.Field(oldObj, func(oldObj *Struct) *NonComparableStruct { return &oldObj.NonComparableStructField }), obj)...)

	// field Struct.NonComparableStructPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *NonComparableStruct, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("noncomparableStructPtrField"), obj.NonComparableStructPtrField, safe.Field(oldObj, func(oldObj *Struct) *NonComparableStruct { return oldObj.NonComparableStructPtrField }), obj)...)

	// field Struct.SliceField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []string, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("sliceField"), obj.SliceField, safe.Field(oldObj, func(oldObj *Struct) []string { return oldObj.SliceField }), obj)...)

	// field Struct.MapField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]string, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("mapField"), obj.MapField, safe.Field(oldObj, func(oldObj *Struct) map[string]string { return oldObj.MapField }), obj)...)

	// field Struct.ImmutableField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ImmutableType, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, Validate_ImmutableType(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("immutableField"), &obj.ImmutableField, safe.Field(oldObj, func(oldObj *Struct) *ImmutableType { return &oldObj.ImmutableField }), obj)...)

	// field Struct.ImmutablePtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ImmutableType, parent *Struct) (errs field.ErrorList) {
			errs = append(errs, Validate_ImmutableType(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("immutablePtrField"), obj.ImmutablePtrField, safe.Field(oldObj, func(oldObj *Struct) *ImmutableType { return oldObj.ImmutablePtrField }), obj)...)

	return errs
}
