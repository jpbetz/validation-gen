//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package immutable

import (
	context "context"
	fmt "fmt"

	equality "k8s.io/apimachinery/pkg/api/equality"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		switch op.Request.SubresourcePath() {
		case "/":
			return Validate_Struct(ctx, op, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresource: %v", obj, op.Request.SubresourcePath()))}
	})
	return nil
}

func Validate_ImmutableType(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *ImmutableType) (errs field.ErrorList) {
	// type ImmutableType
	if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
		return nil // no changes
	}
	errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)

	return errs
}

func Validate_Struct(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.StringField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringField"), &obj.StringField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.StringField }))...)

	// field Struct.StringPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutablePointerByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringPtrField"), obj.StringPtrField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.StringPtrField }))...)

	// field Struct.StructField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ComparableStruct) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("structField"), &obj.StructField, safe.Field(oldObj, func(oldObj *Struct) *ComparableStruct { return &oldObj.StructField }))...)

	// field Struct.StructPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ComparableStruct) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("structPtrField"), obj.StructPtrField, safe.Field(oldObj, func(oldObj *Struct) *ComparableStruct { return oldObj.StructPtrField }))...)

	// field Struct.NonComparableStructField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *NonComparableStruct) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("noncomparableStructField"), &obj.NonComparableStructField, safe.Field(oldObj, func(oldObj *Struct) *NonComparableStruct { return &oldObj.NonComparableStructField }))...)

	// field Struct.NonComparableStructPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *NonComparableStruct) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("noncomparableStructPtrField"), obj.NonComparableStructPtrField, safe.Field(oldObj, func(oldObj *Struct) *NonComparableStruct { return oldObj.NonComparableStructPtrField }))...)

	// field Struct.SliceField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []string) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("sliceField"), obj.SliceField, safe.Field(oldObj, func(oldObj *Struct) []string { return oldObj.SliceField }))...)

	// field Struct.MapField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]string) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableByReflect(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("mapField"), obj.MapField, safe.Field(oldObj, func(oldObj *Struct) map[string]string { return oldObj.MapField }))...)

	// field Struct.ImmutableField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ImmutableType) (errs field.ErrorList) {
			errs = append(errs, Validate_ImmutableType(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("immutableField"), &obj.ImmutableField, safe.Field(oldObj, func(oldObj *Struct) *ImmutableType { return &oldObj.ImmutableField }))...)

	// field Struct.ImmutablePtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *ImmutableType) (errs field.ErrorList) {
			errs = append(errs, Validate_ImmutableType(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("immutablePtrField"), obj.ImmutablePtrField, safe.Field(oldObj, func(oldObj *Struct) *ImmutableType { return oldObj.ImmutablePtrField }))...)

	// field Struct.IntPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutablePointerByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("intPtrField"), obj.IntPtrField, safe.Field(oldObj, func(oldObj *Struct) *int { return oldObj.IntPtrField }))...)

	// field Struct.BoolPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *bool) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutablePointerByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("boolPtrField"), obj.BoolPtrField, safe.Field(oldObj, func(oldObj *Struct) *bool { return oldObj.BoolPtrField }))...)

	// field Struct.StringWithDefault
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			// Non-zero defaults are 'always set' and cannot transition from unset to set.
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			// optional fields with default values are effectively required
			if e := validate.RequiredValue(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringWithDefault"), &obj.StringWithDefault, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.StringWithDefault }))...)

	// field Struct.IntPtrWithDefault
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int32) (errs field.ErrorList) {
			// Non-zero defaults are 'always set' and cannot transition from unset to set.
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			// optional fields with default values are effectively required
			if e := validate.RequiredPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			errs = append(errs, validate.ImmutablePointerByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("intPtrWithDefault"), obj.IntPtrWithDefault, safe.Field(oldObj, func(oldObj *Struct) *int32 { return oldObj.IntPtrWithDefault }))...)

	// field Struct.IntWithZeroDefault
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int32) (errs field.ErrorList) {
			// Zero-value defaults are treated as 'unset' by immutable validation.
			// optional value-type fields with zero-value defaults are purely documentation
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("intWithZeroDefault"), &obj.IntWithZeroDefault, safe.Field(oldObj, func(oldObj *Struct) *int32 { return &oldObj.IntWithZeroDefault }))...)

	// field Struct.StringWithZeroDefault
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			// Zero-value defaults are treated as 'unset' by immutable validation.
			// optional value-type fields with zero-value defaults are purely documentation
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("stringWithZeroDefault"), &obj.StringWithZeroDefault, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.StringWithZeroDefault }))...)

	// field Struct.RequiredImmutableField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			if e := validate.RequiredValue(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			errs = append(errs, validate.ImmutableValueByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("requiredImmutableField"), &obj.RequiredImmutableField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.RequiredImmutableField }))...)

	// field Struct.OptionalImmutableField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			if op.Type == operation.Update && (obj == oldObj || (obj != nil && oldObj != nil && *obj == *oldObj)) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.ImmutablePointerByCompare(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("optionalImmutableField"), obj.OptionalImmutableField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.OptionalImmutableField }))...)

	return errs
}
