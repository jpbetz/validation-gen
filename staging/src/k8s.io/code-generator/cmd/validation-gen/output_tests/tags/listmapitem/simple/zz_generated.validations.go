//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package simple

import (
	context "context"

	equality "k8s.io/apimachinery/pkg/api/equality"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Struct(ctx, op, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
	})
	return nil
}

func Validate_Struct(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.SingleKey
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []Item) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == "target"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Item) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem SingleKey[key=target]")
			})...)
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == "fixed"
			}, validate.ImmutableByCompare)...)
			return
		}(fldPath.Child("singleKey"), obj.SingleKey, safe.Field(oldObj, func(oldObj *Struct) []Item { return oldObj.SingleKey }))...)

	// field Struct.MultiKey
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []MultiItem) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *MultiItem) bool {
				if item == nil {
					return false
				}
				return item.Key1 == "a" && item.Key2 == "b"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *MultiItem) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem MultiKey[key1=a,key2=b]")
			})...)
			return
		}(fldPath.Child("multiKey"), obj.MultiKey, safe.Field(oldObj, func(oldObj *Struct) []MultiItem { return oldObj.MultiKey }))...)

	// field Struct.WithSubfield
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []SubfieldItem) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *SubfieldItem) bool {
				if item == nil {
					return false
				}
				return item.Key == "target"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *SubfieldItem) field.ErrorList {
				return validate.Subfield(ctx, op, fldPath, obj, oldObj, "stringField", func(o *SubfieldItem) *string { return &o.StringField }, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
					return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem WithSubfield[key=target].stringField")
				})
			})...)
			return
		}(fldPath.Child("withSubfield"), obj.WithSubfield, safe.Field(oldObj, func(oldObj *Struct) []SubfieldItem { return oldObj.WithSubfield }))...)

	// field Struct.EmptyKey
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []Item) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == ""
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Item) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem EmptyKey[key=]")
			})...)
			return
		}(fldPath.Child("emptyKey"), obj.EmptyKey, safe.Field(oldObj, func(oldObj *Struct) []Item { return oldObj.EmptyKey }))...)

	// field Struct.Special
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []Item) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == "with\"quotes"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Item) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem Special[key=with\"quotes]")
			})...)
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == "multi\nline"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Item) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem Special[key=multi\nline]")
			})...)
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *Item) bool {
				if item == nil {
					return false
				}
				return item.Key == "unicode-ðŸš€"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Item) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem Special[key=unicode-ðŸš€]")
			})...)
			return
		}(fldPath.Child("special"), obj.Special, safe.Field(oldObj, func(oldObj *Struct) []Item { return oldObj.Special }))...)

	// field Struct.OpaqueList
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OpaqueItem) (errs field.ErrorList) {
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.ListMapItemByKeyValues(ctx, op, fldPath, obj, oldObj, func(item *OpaqueItem) bool {
				if item == nil {
					return false
				}
				return item.Key == "validated"
			}, func(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *OpaqueItem) field.ErrorList {
				return validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "listMapItem OpaqueList[key=validated]")
			})...)
			return
		}(fldPath.Child("opaqueList"), obj.OpaqueList, safe.Field(oldObj, func(oldObj *Struct) []OpaqueItem { return oldObj.OpaqueList }))...)

	return errs
}
